
void test() {
	Integer N("491031670571323699930754850755350958835673118012540388315189447929576772752429743504097763317536309748301370163335234925580190676085681116126983489578718316590175355406913077610976641643422410463483734183056560738422778669690727201503639190267515220345334432162312448868612459911779005048950734632448583793852935220607291842669776438541848692393054252365794529089175602518290411424833478686994491570887200097222602040848315084737242503175234441784084900661040131454622412097912288108952626639571065339054057991855463996722551522709753184444957001530010167322714088862271326199736486370973112460858560068701");
	Integer A("278387571980179847439520128709395254562229930764780269132358909469176154284849941889550954762342389397134574367149234093223784374347704156288976549703788564160317395535720103238642264206548429568253614731111926164587050096132018919013253569669804491584228905466375028499079819464078387729287174219890062874228368818988515152417690986663895735832094575963285097731713792469781923571301896390868707279427829814259823637744605126035774518418276426873678379751071395489548336557878195564731657346843189667380697784328705935188321159454904060779283574791054504911560964178926441885183758217784328635067433303101");
	Integer B("344295774346870561459952484648769958819580088722959036817462815457494021472106764682424204086102244288736195999998202716142211748282177314150742693661733703811434589131724524435917339655071581393003371018860839817098964798024579020795660852514835944030755569683912791470538651903373100246353827236936786990230256868381882793496831174972271838383899741924730852991390729640750190282641623402250906153841219025199847999257026243856868056930367469581362904234177099094404646266692003071645546153674482452385355321551891522940429866813879016690641105731665729588117548037021594963627406582604945327197183364036");
	unsigned int r = 63;
	unsigned int d = 2802845707;

	P_BASE data = (P_BASE)calloc( 63 * 2 , sizeof( BASE ) );

	memcpy( data , A.getRawPointer() , A.getWordCount() * sizeof(BASE) );
	memcpy( &data[r] , B.getRawPointer() , B.getWordCount() * sizeof(BASE) );

	unsigned int data_len = 63 *2;

	run_kernel(  0 , 1 , r , data , data_len , N.getRawPointer() , r , d , 5 , 1 , cout );
	std::free( data );

	//system( "PAUSE" );
}


void cpu() {

	Integer _N( "576460752303423488");
	Integer _A(   "39113137993379399051992051537360881968725" );
	Integer _B( "1575660738145266420625006210694085498803740" );	
	std::cout << _A << std::endl;
	std::cout << _B << std::endl;
	unsigned int r = _N.getWordCount();
	unsigned int d = 3415978915;

	C_P_BASE N = _N.getRawPointer();
	C_P_BASE A = _A.getRawPointer();
	C_P_BASE B = _B.getRawPointer();
	
	P_BASE res = (P_BASE)calloc( r + 1 , sizeof( BASE ) );

	for( int i = 0 ; i < r ; i++ ) {

		// Multiply
		// res += A * B[i]
		unsigned int c = 0,carry = 0;
		for( int j = 0 ; j < r; j++ ) {

			// Multiplication
			unsigned long long tmp = A[j];
			tmp = tmp * B[i];
			tmp += carry;

			// Propogate Carry from this
			carry = hi(tmp);
			tmp = low(tmp);

			// Add
			tmp += res[j];
			res[j] = low(tmp);

			// Propogate carry
			carry += hi(tmp);

		}res[r] += carry;

		if( res[0] ) {
			// TMP = N * [ (T[0] * d) % 2^b ]
			BASE t = low(res[0] * d);
			c = carry = 0;
			for( unsigned long long j = 0 ; j < r ; j++ ) {
				// Multiply
				unsigned long long tmp = t;
				tmp = tmp * N[j];
				tmp += carry;

				// Propogate carry
				carry = hi( tmp );
				tmp = low( tmp );
				
				// Add
				tmp += res[j];
				res[j] = low( tmp );

				// Propogate
				carry += hi( tmp );

			}res[r] += carry;
		}

		// Shift
		for( int j = 0 ; j < r ; j++ ) {
			res[j] = res[j + 1];
		}res[r] = 0;

	}


	Integer result( res , r + 1 );

	std::cout << result << std::endl;

	std::free( res );
}
